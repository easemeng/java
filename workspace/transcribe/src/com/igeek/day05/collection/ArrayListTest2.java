package com.igeek.day05.collection;

import java.util.ArrayList;

//继承  
//在java中默认所有类的父类都是object 类 。  
//有了继承关系之后 ，子类会继承父类中所有的属性跟方法 。(注意：私有属性跟方法不能被子类调用。)
public class ArrayListTest2 {
	/**
	 * 
	 * java中  对于8种基本数据类型而言  都有他们自己的包装类 。
	 * 			把基本数据类型也变成对象了 。
	 * 
	 * byte  包装类就是  Byte
	 * short  		 Short 
	 * int           		Integer
	 * long 		 Long
	 * 
	 * char          		Character
	 * boolean 		 Boolean
	 * float         Float
	 * double		 Double
	 * 
	 */
	public static void main(String[] args) {
		//泛型  作用是用来约束   集合中的数据类型 。<String>  只能放string类型。
		ArrayList<Integer> list = new ArrayList<Integer>();
		
		list.add(123);
		list.add(456);
		list.add(789);
		
		//list.remove(0);
		//list.set(0, 888);
		//System.out.println(list);
		
		//对象.length  数组 
		//对象.length()   字符串
		//对象.size()   集合
		for (int i = 0; i < list.size(); i++) {
			Integer in = list.get(i);
			System.out.println(in);
		}
		
		
		
		
		//继承  
		//在java中默认所有类的父类都是object 类 。  
		//有了继承关系之后 ，子类会继承父类中所有的属性跟方法 。(注意：私有属性跟方法不能被子类调用。)
		
		/**
		 * java中  对于8种基本数据类型而言  都有他们自己的包装类 。
		 * 			把基本数据类型也变成对象了 。
		 * 
		 * byte  包装类就是  Byte
		 * short  		 Short 
		 * int           		Integer
		 * long 		 Long
		 * 
		 * char          		Character
		 * boolean 		 Boolean
		 * float         Float
		 * double		 Double
		 */
		//泛型  作用是用来约束   集合中的数据类型 。<String>  只能放string类型。
		ArrayList<Integer> list2 = new ArrayList<Integer>();
		
		list2.add(123);
		list2.add(456);
		list2.add(789);
		
		//list2.remove(0);
		//list2.set(0, 888);
		//System.out.println(list2);
		
		//对象.length  数组 
		//对象.length()   字符串
		//对象.size()   集合
		for (int i = 0; i < list2.size(); i++) {
			Integer in = list2.get(i);
			System.out.println(in);
		}
		
		
		
		
		//继承  
		//在java中默认所有类的父类都是object 类 。  
		//有了继承关系之后 ，子类会继承父类中所有的属性跟方法 。(注意：私有属性跟方法不能被子类调用。)
		
		/**
		 * java中  对于8种基本数据类型而言  都有他们自己的包装类 。
		 * 			把基本数据类型也变成对象了 。
		 * 
		 * byte  包装类就是  Byte
		 * short  		 Short 
		 * int           		Integer
		 * long 		 Long
		 * 
		 * char          		Character
		 * boolean 		 Boolean
		 * float         Float
		 * double		 Double
		 */
		//泛型  作用是用来约束   集合中的数据类型 。<String>  只能放string类型。
		ArrayList<Integer> list3 = new ArrayList<Integer>();
		
		list3.add(123);
		list3.add(456);
		list3.add(789);
		
		//list3.remove(0);
		//list3.set(0, 888);
		//System.out.println(list3);
		
		//对象.length  数组 
		//对象.length()   字符串
		//对象.size()   集合
		for (int i = 0; i < list3.size(); i++) {
			Integer in = list3.get(i);
			System.out.println(in);
		}
		
		
		
		
		//继承  
		//在java中默认所有类的父类都是object 类 。  
		//有了继承关系之后 ，子类会继承父类中所有的属性跟方法 。(注意：私有属性跟方法不能被子类调用。)
		
		/**
		 * java中  对于8种基本数据类型而言  都有他们自己的包装类 。
		 * 			把基本数据类型也变成对象了 。
		 * 
		 * byte  包装类就是  Byte
		 * short  		 Short 
		 * int           		Integer
		 * long 		 Long
		 * 
		 * char          		Character
		 * boolean 		 Boolean
		 * float         Float
		 * double		 Double
		 */
		//泛型  作用是用来约束   集合中的数据类型 。<String>  只能放string类型。
		ArrayList<Integer> list4 = new ArrayList<Integer>();
		
		list4.add(123);
		list4.add(456);
		list4.add(789);
		
		//list4.remove(0);
		//list4.set(0, 888);
		//System.out.println(list4);
		
		//对象.length  数组 
		//对象.length()   字符串
		//对象.size()   集合
		for (int i = 0; i < list4.size(); i++) {
			Integer in = list4.get(i);
			System.out.println(in);
		}
		
		
		
		
		//继承  
		//在java中默认所有类的父类都是object 类 。  
		//有了继承关系之后 ，子类会继承父类中所有的属性跟方法 。(注意：私有属性跟方法不能被子类调用。)
		
		/**
		 * java中  对于8种基本数据类型而言  都有他们自己的包装类 。
		 * 			把基本数据类型也变成对象了 。
		 * 
		 * byte  包装类就是  Byte
		 * short  		 Short 
		 * int           		Integer
		 * long 		 Long
		 * 
		 * char          		Character
		 * boolean 		 Boolean
		 * float         Float
		 * double		 Double
		 */
		//泛型  作用是用来约束   集合中的数据类型 。<String>  只能放string类型。
		ArrayList<Integer> list5 = new ArrayList<Integer>();
		
		list5.add(123);
		list5.add(456);
		list5.add(789);
		
		//list52.remove(0);
		//list5.set(0, 888);
		//System.out.println(list5);
		
		//对象.length  数组 
		//对象.length()   字符串
		//对象.size()   集合
		for (int i = 0; i < list5.size(); i++) {
			Integer in = list5.get(i);
			System.out.println(in);
		}
	}

}
